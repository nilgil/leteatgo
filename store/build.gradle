plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'kr.co.leteatgo'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

processResources {
    filesMatching('application.yml') {
        expand project: project
    }
}

jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url System.getenv("LEG_COMMON_GITLAB_URL")
        credentials(HttpHeaderCredentials) {
            name = "Private-Token"
            value = System.getenv("GITLAB_ACCESS_TOKEN")
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'kr.co.leteatgo:leg-common:1.0.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    implementation "am.ik.timeflake:timeflake4j:1.4.0"
    implementation 'org.hibernate.orm:hibernate-spatial:6.1.7.Final'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-sql-spatial:5.0.0'
    implementation 'com.querydsl:querydsl-spatial:5.0.0'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-spatial"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

// Querydsl
def querydslDir = "$buildDir/generated/querydsl"
sourceSets {
    main.java.srcDirs += [querydslDir]
}
tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}
clean.doLast {
    file(querydslDir).deleteDir()
}